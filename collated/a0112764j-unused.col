//@author: a0112764j-unused



	/**
	 * origin: task_catalyst\src\main\java\moustachio\task_catalyst\FileHandler.java
	 */

	/**
	 * This function is implemented for the purpose of storing setting in
	 * future. There is no setting to save for users but it can be useful for
	 * future if users set preferences.
	 * 
	 * @param name The name of the setting used.
	 * @param fileName The filename used to save.
	 * @param value The value of the setting.
	 * @return Returns true if successful, false otherwise.
	 */
	public boolean writeSetting(String name, String fileName, String value) {
		assert (fileName != null && name != null && value != null);
		Boolean isSuccess = false;

		checkWriteSettingParameters(name, fileName, value);

		try {
			isSuccess = writeSettingTofile(name, fileName, value);
		} catch (FileNotFoundException e) {
			blackBox.info(MESSAGE_NOT_FOUND);
		} catch (IOException e) {
			blackBox.info(MESSAGE_IO_FAULT_WRITE);
		}
		return isSuccess;
	}

	// End of segment: task_catalyst\src\main\java\moustachio\task_catalyst\FileHandler.java





	/**
	 * origin: task_catalyst\src\main\java\moustachio\task_catalyst\FileHandler.java
	 */

	private void checkWriteSettingParameters(String name, String fileName,
			String value) throws Error {
		if (isInvalidFileFormat(fileName) || isInvalidName(name)
				|| isInvalidName(value)) {
			blackBox.info(MESSAGE_INVALID_FILE_FORMAT);
			throw new Error(MESSAGE_INVALID_FILE_FORMAT);
		}
	}

	// End of segment: task_catalyst\src\main\java\moustachio\task_catalyst\FileHandler.java





	/**
	 * origin: task_catalyst\src\main\java\moustachio\task_catalyst\FileHandler.java
	 */

	private Boolean writeSettingTofile(String name, String fileName,
			String value) throws IOException {
		assert (value != null && name != null);
		Boolean isSuccess = false;
		BufferedWriter writer = new BufferedWriter(new FileWriter(fileName,
				true));
		writer.write(String.format(STRING_WRITE_SETTING, name, value));
		writer.newLine();
		writer.close();
		isSuccess = true;
		return isSuccess;
	}

	// End of segment: task_catalyst\src\main\java\moustachio\task_catalyst\FileHandler.java





	/**
	 * origin: task_catalyst\src\main\java\moustachio\task_catalyst\FileHandler.java
	 */

	/**
	 * This function is implemented for the purpose of reading setting in
	 * future. There is no setting to save for users but it can be useful for
	 * future if users set preferences.
	 * 
	 * @param name The name of the setting to load.
	 * @param fileName The name of the file to load from.
	 * @return Returns true the setting is found successful, null otherwise.
	 */
	public String readSetting(String name, String fileName) {
		assert (name != null && fileName != null);

		checkReadSettingParameters(name, fileName);

		String value = STRING_EMPTY;
		try {
			BufferedReader reader = getReader(fileName);
			String lineString;
			if (isEmptyFile(fileName)) {
				reader.close();
				return MESSAGE_EMPTY_FILE;
			}

			while ((lineString = reader.readLine()) != null) {
				if (lineString.contains(name)) {
					value += lineString + STRING_SPACE;
				}
			}
			reader.close();
		} catch (IOException e) {
			blackBox.info(MESSAGE_IO_FAULT_READ);
		}
		return value;
	}

	// End of segment: task_catalyst\src\main\java\moustachio\task_catalyst\FileHandler.java





	/**
	 * origin: task_catalyst\src\main\java\moustachio\task_catalyst\FileHandler.java
	 */

	private void checkReadSettingParameters(String name, String fileName)
			throws Error {
		if (isInvalidFileFormat(fileName) || isInvalidName(name)) {
			blackBox.info(MESSAGE_INVALID_FILE_FORMAT);
			throw new Error(MESSAGE_INVALID_FILE_FORMAT);
		}
	}

	private BufferedReader getReader(String fileName)
			throws FileNotFoundException {
		FileReader freader = new FileReader(fileName);
		BufferedReader reader = new BufferedReader(freader);
		return reader;
	}

	private boolean isEmptyFile(String fileName) {
		try {
			BufferedReader reader = getReader(fileName);
			if (reader.readLine() == null) {
				reader.close();
				return true;
			}
			reader.close();
		} catch (IOException e) {
			blackBox.info(MESSAGE_IO_FAULT_READ);
		}
		return false;
	}

	public void clear(String fileName) {
		try {
			writeEmpty(PATH_TASK_CATALYST + fileName);
		} catch (FileNotFoundException e) {
			blackBox.info(MESSAGE_NOT_FOUND);
		}
	}

	private void writeEmpty(String fileName) throws FileNotFoundException {
		PrintWriter writer;
		writer = new PrintWriter(fileName);
		writer.print(STRING_EMPTY);
		writer.close();
	}

	public boolean isInvalidFileFormat(String fileName) {
		Pattern pattern = Pattern.compile(REGEX_VALID_FILE_FORMAT);
		Matcher matcher = pattern.matcher(fileName);
		boolean isMatch = matcher.matches();
		return !isMatch;
	}

	public boolean isInvalidName(String name) {
		Pattern pattern = Pattern.compile(REGEX_VALID_PATTERN);
		Matcher matcher = pattern.matcher(name);
		boolean isMatch = matcher.matches();
		return !isMatch;
	}

	private void printMessage(String message) {
		System.out.println(message);
	}
}
	// End of segment: task_catalyst\src\main\java\moustachio\task_catalyst\FileHandler.java





	/**
	 * origin: task_catalyst\src\main\java\moustachio\task_catalyst\StorageActual.java
	 */

	public boolean saveSetting(String name, String fileName, String value) {
		return fileHandler.writeSetting(name, fileName, value) ;
	}
	
	@Override
	// End of segment: task_catalyst\src\main\java\moustachio\task_catalyst\StorageActual.java





	/**
	 * origin: task_catalyst\src\main\java\moustachio\task_catalyst\StorageActual.java
	 */

	public String loadSetting(String name, String fileName) {
		return fileHandler.readSetting(name, fileName);
	}

	private boolean saveTasksToFile(List<Task> list, String fileName) {
		try{
			fileHandler.clear(fileName);
			for(int i=0; i<list.size(); i++){
				fileHandler.writeTask(list.get(i), fileName);
			}
			return true;
		}catch (IOException e) {
			blackbox.info(MESSAGE_IO_FAULT);
		}
		return false;
	}
}
	// End of segment: task_catalyst\src\main\java\moustachio\task_catalyst\StorageActual.java





