//@author: a0111921w-reused



	/**
	 * origin: task_catalyst\src\main\java\moustachio\task_catalyst\TaskCatalyst.java
	 */

	//http://docs.oracle.com/javase/8/javase-clienttechnologies.htm
	@Override
	public void start(Stage primaryStage) {
		this.primaryStage = primaryStage;
		javafx.scene.image.Image applicationIcon = new javafx.scene.image.Image(
				getClass().getResourceAsStream(PATH_SYSTEM_TRAY_IMAGE));
		this.primaryStage.getIcons().add(applicationIcon);
		try {
			loadSystemTray(this.primaryStage);
			startHotKeys();
			FXMLLoader loader = new FXMLLoader(
					TaskCatalyst.class.getResource(PATH_UI_FXML));
			Parent root = null;
			root = loader.load();
			Scene scene = new Scene(root);

			controller = loader.getController();
			controller.connectWithMainTaskCatalyst(this);

			addHotKeysListeners(primaryStage, scene);
			addDragListeners(root);

			// set stylesheet
			scene.getStylesheets().add(
					getClass().getResource(PATH_CSS).toExternalForm());

			// set stage
			Platform.setImplicitExit(false);
			this.primaryStage.setScene(scene);
			this.primaryStage.initStyle(StageStyle.UNDECORATED);
			this.primaryStage.setAlwaysOnTop(true);
			this.primaryStage.show();

		} catch (Exception e) {
			blackbox.info(MESSAGE_FXML_LOAD_EXCEPTION);
			stop();
		}
	}

	// End of segment: task_catalyst\src\main\java\moustachio\task_catalyst\TaskCatalyst.java





	/**
	 * origin: task_catalyst\src\main\java\moustachio\task_catalyst\TaskCatalyst.java
	 */

	//http://stackoverflow.com/questions/18792822/dragging-an-undecorated-stage-in-javafx
	/**
	 * This function enables the UI to be draggable.
	 */ 
	private void addDragListeners(final Node mainUI) {

		mainUI.setOnMousePressed(new EventHandler<MouseEvent>() {
			@Override
			public void handle(MouseEvent me) {

				if (me.getButton() != MouseButton.MIDDLE) {
					initialX = me.getSceneX();
					initialY = me.getSceneY();
				} else {
					mainUI.getScene().getWindow().centerOnScreen();
					initialX = mainUI.getScene().getWindow().getX();
					initialY = mainUI.getScene().getWindow().getY();
				}

			}
		});

		mainUI.setOnMouseDragged(new EventHandler<MouseEvent>() {
			@Override
			public void handle(MouseEvent me) {
				if (me.getButton() != MouseButton.MIDDLE) {
					mainUI.getScene().getWindow()
							.setX(me.getScreenX() - initialX);
					mainUI.getScene().getWindow()
							.setY(me.getScreenY() - initialY);
				}
			}
		});
	}

	// End of segment: task_catalyst\src\main\java\moustachio\task_catalyst\TaskCatalyst.java





	/**
	 * origin: task_catalyst\src\main\java\moustachio\task_catalyst\UIController.java
	 */

	//http://docs.oracle.com/javafx/2/ui_controls/list-view.htm
	private void listChangeListener() {

		hashTagList.getSelectionModel().selectedItemProperty()
				.addListener(new ChangeListener<String>() {
					public void changed(ObservableValue<? extends String> ov,
							String old_val, String new_val) {
						if (old_val != null && new_val != null
								&& !old_val.equals(new_val)) {
							Message message = logic.processCommand(new_val);
							if (message.getType() == MessageType.SUCCESS) {
								statusMessage.setText(message.getMessage());
							}
							displayTasks();
						}
					}
				});
	}

	/**
	 * This method add a ChangeListener for statusMessage to look for change in
	 * height and adjust stage height accordingly
	 */
	private void labelChangeListener() {

		statusMessage.heightProperty().addListener(
				new ChangeListener<Number>() {
					@Override
					public void changed(ObservableValue<? extends Number> ov,
							Number t, Number t1) {
						tc.setStageHeight(CONSTANT_STAGE_HEIGHT + container.getHeight());
					}
				});
	}

	private void initializeForms() {
		statusMessage.setWrapText(true);
		taskScrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
		Platform.runLater(new Runnable() {
			@Override
			public void run() {
				statusMessage.setText(MESSAGE_STATUS_BAR);
				setFocusForHashTable(CONSTANT_INITIAL_INDEX);
				commandBar.requestFocus();
			}
		});
		displayTasks();
		displayHashTags();
	}

	private void setFocusForTaskTable(int index) {
		Platform.runLater(new Runnable() {
			@Override
			public void run() {
				if (index == -1) {
					return;
				}

				TaskGrid taskGrid = highlightID(index);
				scrollToTask(index, taskGrid);
			}
		});
	}

	private void scrollToTask(int index, TaskGrid taskGrid) {
		// get vbox's height
		double height = taskScrollPane.getContent().getBoundsInLocal()
				.getHeight();

		double y = taskGrid.getBoundsInParent().getMaxY();

		if (y < 10) {
			setFocusForTaskTable(index);
			return;
		}

		y = y + ((y / height) - 0.5) * taskScrollPane.getHeight()
				- taskGrid.getHeight() / 2;

		taskScrollPane.setVvalue(y / height);
	}

	private TaskGrid highlightID(int index) {
		VBox taskContainer = (VBox) taskScrollPane.getContent();

		TaskGrid taskGrid = null;

		// get task ID label location
		for (int i = index; i < taskContainer.getChildren().size(); i++) {
			if (taskContainer.getChildren().get(i) instanceof TaskGrid) {
				taskGrid = (TaskGrid) taskContainer.getChildren().get(i);
				
				if (taskGrid.getTaskGridID() == index) {
					break;
				}
			}
		}

		// highlight id label
		taskGrid.highlight();
		
		return taskGrid;
	}

	private void setFocusForTaskTableList(List<Integer> list) {
		for (int index : list) {
			setFocusForTaskTable(index);
		}
	}

	private void setFocusForHashTable(int index) {
		Platform.runLater(new Runnable() {
			@Override
			public void run() {
				hashTagList.scrollTo(index);
				hashTagList.getSelectionModel().select(index);
			}
		});
	}

	/**
	 * This function handles the status message,task and hashtag to display when
	 * user hit enter
	 * 
	 * @param event The event generated by the action.
	 */
	public void handleTextFieldOnAction(ActionEvent event) {
		Message message = logic.processCommand(commandBar.getText());
		handleMessage(message);
	}

	/**
	 * This function handles the actions to execute with different message type
	 * 
	 * @param message
	 */
	private void handleMessage(Message message) {
		switch (message.getType()) {
			case SUCCESS:
				statusMessage.setText(message.getMessage());
				setFocusForHashTable(logic.getHashtagSelected());
				setFocusForTaskTableList(logic.getTasksSelected());
				displayHashTags();
				displayTasks();
				commandBar.clear();
				break;
			case AUTOCOMPLETE:
				commandBar.setText(message.getMessage());
				commandBar.positionCaret(commandBar.getText().length());
				break;
			case ERROR:
				statusMessage.setText(message.getMessage());
				break;
			default:
				break;
		}
	}

	/**
	 * For hotkey to scroll up tasks list
	 */
	public void scrollTaskUp() {
		Platform.runLater(new Runnable() {
			@Override
			public void run() {
				if (!hashTagList.isFocused()) {
					double scrollAmt = taskScrollPane.getVvalue()
							- taskScrollPane.getHeight()
							/ 4
							/ taskScrollPane.getContent().getBoundsInLocal()
									.getHeight();
					taskScrollPane.setVvalue(scrollAmt);
				}
			}
		});
	}

	/**
	 * For hotkey to scroll down tasks list
	 */
	public void scrollTaskDown() {
		Platform.runLater(new Runnable() {
			@Override
			public void run() {
				if (!hashTagList.isFocused()) {
					double scrollAmt = taskScrollPane.getVvalue()
							+ taskScrollPane.getHeight()
							/ 4
							/ taskScrollPane.getContent().getBoundsInLocal()
									.getHeight();
					;
					taskScrollPane.setVvalue(scrollAmt);
				}
			}
		});
	}

	/**
	 * For hotkey to scroll up hashtag list
	 */
	public void scrollHashtagUp() {
		Platform.runLater(new Runnable() {
			@Override
			public void run() {
				int now = hashTagList.getSelectionModel().getSelectedIndex();
				hashTagList.getSelectionModel().select(Math.max(0, now - 1));
			}
		});
	}
	
	public void scrollHashtagDown() {
		Platform.runLater(new Runnable() {
			@Override
			public void run() {
				int now = hashTagList.getSelectionModel().getSelectedIndex();
				hashTagList.getSelectionModel().select(now + 1);
			}
		});
	}
	
	/**
	 * For CTRL + D, this method will paste the text into command bar
	 * @param pasted The text copied from clipboard.
	 */
	public void setCommandBar(String pasted) {
		Platform.runLater(new Runnable() {
			@Override
			public void run() {
				commandBar.setText(pasted);
				commandBar.requestFocus();
				commandBar.positionCaret(commandBar.getText().length());
			}
		});
	}

	/**
	 * This function handles the status message to display and provide
	 * autocomplete for edit command while using is typing
	 * 
	 * @param event The event generated by the keypress.
	 * 
	 */
	public void handleTextFieldWhileUserTyping(KeyEvent event) {
		// status message will be displayed when user didn't press enter or
		// control
		if (!event.getCode().equals(KeyCode.ENTER)
				&& !event.getCode().equals(KeyCode.CONTROL)) {
			Message message = logic.getMessageTyping(commandBar.getText());

			// This will remove autocomplete when hitting backspace during edit
			if (message.getType() == MessageType.AUTOCOMPLETE
					&& !event.getCode().equals(KeyCode.BACK_SPACE)) {
				commandBar.setText(message.getMessage());
				commandBar.positionCaret(commandBar.getText().length());
				handleTextFieldWhileUserTyping(event);
			} else {
				statusMessage.setText(message.getMessage());
			}
		}
	}

	/**
	 * This method handles displaying of date category and tasks and set into
	 * the scroll pane
	 */
	private void displayTasks() {
		VBox taskContainer = new VBox();
		String dateCategory;
		String prevDate = null;
		String currentDate = null;
		Date startDate;
		List<Task> task = logic.getList();

		if (task.isEmpty()) {
			StackPane container = new StackPane();
			container = createEmptyMessageLabel(container);
			taskScrollPane.setContent(container);
		} else {
			for (int i = 0; i < task.size(); i++) {
				Task currentTask = task.get(i);

				if (currentTask.getDateStart() != null) {
					// isRange: Task with start and end date
					// isBlocking: Task with multiple date
					if (currentTask.isRange()) {
						startDate = currentTask.getDateStart();
					} else if (currentTask.isBlocking()) {
						startDate = currentTask.getNextDate();
						if (startDate == null) {
							startDate = currentTask.getDateEnd();
						}
					} else {
						startDate = currentTask.getDateStart();
					}

					dateCategory = setDateCategory(startDate);

				} else if(currentTask.isError()) {
					dateCategory = "Error";
				} else {
					// Floating task
					dateCategory = "Someday";
				}
				currentDate = dateCategory;

				// Ignore repeated dates
				if (!currentDate.equals(prevDate)) {
					Label dateCategoryLabel = new Label(dateCategory);
					dateCategoryLabel.setMaxWidth(Double.MAX_VALUE);
					dateCategoryLabel.getStyleClass().add("dateCategoryStyle");
					taskContainer.getChildren().add(dateCategoryLabel);
				}

				prevDate = currentDate;

				taskContainer.setSpacing(10);
				taskContainer.getStyleClass().add("vbox");
				taskContainer.getChildren().add(new TaskGrid(i, task.get(i)));
				taskScrollPane.setContent(taskContainer);
			}
		}
	}

	private String setDateCategory(Date startDate) {
		String dateCategory;
		String formatString = "dd MMMM yyyy";

		if (TaskCatalystCommons.isYesterday(startDate)) {
			formatString += "' (Yesterday)'";
		} else if (TaskCatalystCommons.isToday(startDate)) {
			formatString += "' (Today)'";
		} else if (TaskCatalystCommons.isTomorrow(startDate)) {
			formatString += "' (Tomorrow)'";
		} else if (TaskCatalystCommons.isThisWeek(startDate)) {
			formatString += " (E)";
		}
		dateCategory = new SimpleDateFormat(formatString).format(startDate);
		return dateCategory;
	}

	private StackPane createEmptyMessageLabel(StackPane container) {
		Label messageLabel = new Label(MESSAGE_EMPTY_TASKVIEW);
		messageLabel.setPrefHeight(taskScrollPane.getPrefHeight());
		container.getChildren().add(messageLabel);
		container.setAlignment(Pos.CENTER);
		return container;
	}

	private void displayHashTags() {
		hashTagList.setItems(getHashTagFromList());
	}

	private ObservableList<String> getHashTagFromList() {
		List<String> hashTags = logic.getHashtags();

		hashTagToBeDisplayed.clear();
		hashTagToBeDisplayed.addAll(hashTags);

		return hashTagToBeDisplayed;
	}

	private void testInterface() {
		assert rootBorderPane != null : "fx:id=\"rootBorderPane\" was not injected: check your FXML file 'interface.fxml'.";
		assert taskScrollPane != null : "fx:id=\"taskScrollPane\" was not injected: check your FXML file 'interface.fxml'.";
		assert programTitle != null : "fx:id=\"rootBorderPane\" was not injected: check your FXML file 'interface.fxml'.";
		assert hashTagList != null : "fx:id=\"hashTagList\" was not injected: check your FXML file 'interface.fxml'.";
		assert statusMessage != null : "fx:id=\"statusMessage\" was not injected: check your FXML file 'interface.fxml'.";
		assert commandBar != null : "fx:id=\"commandBar\" was not injected: check your FXML file 'interface.fxml'.";
		assert exitButton != null : "fx:id=\"exitButton\" was not injected: check your FXML file 'interface.fxml'.";
	}
	
	// End of segment: task_catalyst\src\main\java\moustachio\task_catalyst\UIController.java





